// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "generated/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x" ]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String         @id @default(uuid())
  username      String         @unique
  password      String
  role          Role           @default(USER)
  defaultCurrency String       @default("EUR")
  groups        GroupMember[]
  paidExpenses  Expense[]      @relation("PaidBy")
  owedExpenses  ExpenseShare[] @relation("OwedBy")
}

model Group {
  id          String       @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  members     GroupMember[]
  expenses    Expense[]
}

model GroupMember {
  id        String   @id @default(uuid())
  userId    String
  groupId   String
  joinedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}

model Expense {
  id          String         @id @default(uuid())
  description String
  amount      Float
  currency    String         
  date        DateTime       @default(now())
  groupId     String
  paidById    String
  group       Group          @relation(fields: [groupId], references: [id])
  paidBy      User           @relation("PaidBy", fields: [paidById], references: [id])
  shares      ExpenseShare[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model ExpenseShare {
  id          String   @id @default(uuid())
  expenseId   String
  userId      String
  amount      Float
  isPaid      Boolean  @default(false)
  paidAt      DateTime?
  expense     Expense  @relation(fields: [expenseId], references: [id])
  user        User     @relation("OwedBy", fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([expenseId, userId])
}